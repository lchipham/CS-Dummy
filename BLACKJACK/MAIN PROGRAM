#This is an object-oriented Black Jack program with 3 additional classes:
# + buttonClass
# + PlayingCard
# + Deck_CS

from graphics import*
from buttonClass import*
from PlayingCard import*
from Deck_CS import*
from random import*

class BlackJack:
    '''A class to generate cards and dealer plays to play a game of Blackjack'''
    
    def __init__(self, dealerHand = [], playerHand = []):    #constructor to initialize instance variables
        '''_init__(self, dHand=[], pHand=[])
        constructor that initializes instance variables, it also gives the playingDeck an initial shuffle
        dealerHand: a list of PlayingCard objects representing the dealer's hand
        playerHand: a list of PlayingCard objects representing the player's hand
        playingDeck: a Deck object representing the deck of cards the game is being played with'''
        self.dHand = dealerHand
        self.pHand = playerHand                              #instance variables
        self.playingDeck = Deck()
        self.playingDeck.shuffle()                           #constructor to shuffle cards

    def initDeal(self, gwin, xposD1, xposD2, yposD1, yposD2, xposP1, xposP2, yposP1, yposP2):  #20,40,45,45,20,40,65,65
        '''initDeal(self,gwin,xposD,yposD,xposP,yposP):
        deals out initial cards, 2 per player and displays dealer and player hands on
        graphical win xposD and yposD give initial position for dealer cards, xposP and yposP are analogous'''
        facedown_dCardVal = self.playingDeck.dealCard()
        self.dHand.append(facedown_dCardVal)
        facedown_dCardImage = Image(Point(xposD1,yposD1), "playingcards/b1fv.gif")  
        facedown_dCardImage.draw(gwin)                  #generates first facedown dealer card
    
        init_pCard = self.playingDeck.dealCard()   #generates first player card
        self.pHand.append(init_pCard)
        image_pCard = Image(Point(xposP1,yposP1), "playingcards/" + init_pCard.getSuit() + str(init_pCard.getRank()) + ".gif")
        image_pCard.draw(gwin)

        init_dCard = self.playingDeck.dealCard()   #generates second dealer card
        self.dHand.append(init_dCard)
        image_dCard = Image(Point(xposD2,yposD2), "playingcards/" + init_dCard.getSuit() + str(init_dCard.getRank()) + ".gif")
        image_dCard.draw(gwin)
    
        init_pCard = self.playingDeck.dealCard()   #generates second player card
        self.pHand.append(init_pCard)
        image_pCard = Image(Point(xposP2,yposP2), "playingcards/" + init_pCard.getSuit() + str(init_pCard.getRank()) + ".gif")
        image_pCard.draw(gwin)

        return facedown_dCardVal

    def hit(self, gwin, xPos, yPos):               #adds a new card to the player's hand
        '''hit(self, gwin, xPos, yPos) adds a new card to the player's hand and places it at xPos, yPos'''
        addedCards = self.playingDeck.dealCard()   #new player card dealt
        image_addedCards = Image(Point(xPos, yPos), "playingcards/" + addedCards.suit + str(addedCards.rank) + ".gif") 
        image_addedCards.draw(gwin)                #card's value is retrieved and card is drawn from playingcard folder
        self.pHand.append(addedCards)

    def evaluateHand(self, hand):                  #evaluates hand by implementing BlackJack rules for card vals
        '''evaluateHand(self, hand)totals the cards in the hand that is passed in and returns total
           (ace counts as 11 if doing so allows total to stay under 21)'''
        tot = 0                                    
        hasAce = False                              #Boolean condition set before loop
        for card in hand:
            cardVal = card.getValue()
            if card.getValue() == 1:                #if Ace takes 1 as its value
                hasAce = True
            tot = tot + cardVal
        if hasAce and tot + 10 <= 21:               #if Ace takes 11 as its value and the total card value doesn't go above 21
            tot = tot + 10
        return tot


    def dealerPlays(self, gwin, xPos, yPos):
        ''' dealearPlays(self, gwin, xPos, yPos) dealer deals cards to herself, stopping when hitting "soft 17"'''
        dTot = self.evaluateHand(self.dHand)        #the value of 2 auto-generated dealer cards 
        while dTot < 17:                            
            dCard = self.playingDeck.dealCard()     #new dealer card dealt
            image_dCard = Image(Point(xPos,yPos), "playingcards/" + dCard.getSuit() + str(dCard.getRank()) + ".gif") #deals if player tot is <= 17, dealer plays
            image_dCard.draw(gwin)
            self.dHand.append(dCard)                #new dealer card appended into existing list of dealer cards
            dTot = dTot + dCard.getValue()
            
        return dTot
 
def gameSetup(gwin):
    ''' GUI interface with title, one theme image and 3 buttons
        allowing users to play, view the rules and quit'''
    
    title = Text(Point(50,85), "BLACKJACK")         #title drawn using Text object
    title.setFace("times roman")
    title.setSize(40)
    title.setFill("lavender")
    title.draw(gwin)
    image1 = Image(Point(50,50), "intro.gif")       #theme image using Image object 
    image1.draw(gwin)
    playButton = Button(gwin, "Play", Point(35,10), 5, 10)      #Buttons created usising Button class
    guideButton = Button(gwin, "Rules", Point(50,10), 5, 10)
    quitButton = Button(gwin, "Quit", Point(65,10), 5, 10)
    closeWin = True                                 #Boolean condition set before while loop
    while closeWin:                                 
        pt = gwin.getMouse()
        if playButton.isClicked(pt):                #user clicks play button to play for 1st and consecutive times
            playAgain = playGame(gwin)
            break
        elif quitButton.isClicked(pt):              #user clicks quit button to stop playing and close window       
            playAgain = False
            closeWin = False
        elif guideButton.isClicked(pt):             #user clicks guideButton to open the pop-up Rules box
            win2 = GraphWin("Rules", 500, 500)      #new window setup 
            win2.setCoords(0, 0, 100, 100)
            win2.setBackground("lavender")
            card = Image(Point(50,50), "card2.gif") #image drawn using Image object
            card.draw(win2)

            money1 = Image(Point(18,50), "money.gif")
            money1.draw(win2)

            money2 = Image(Point(83,50), "money.gif")
            money2.draw(win2)

            progress = Text(Point(50,80), "A card is dealt, face up, to player and then one to the dealer. \nThe dealer's card is face down and called the 'hole' card. \nA second card is then dealt, again face up, to each player.\nEach player decides whether to draw further cards.\nAfter all players have completed their hands, the Dealer \nproceeds to draw cards to complete the Dealer's hand.")
            progress.setFace("times roman")
            progress.setSize(12)
            progress.draw(win2)                     #Instructions drawn using Text object
            
            winIf = Text(Point(50,25),"You win if:\n1. Your total is higher than the Dealer's total\n2. The Dealer's total goes over 21 or 'busts'.")
            winIf.setFace("times roman")
            winIf.setSize(12)
            winIf.draw(win2)
        else:                                       #user clicks outside of the 3 play, rules and quit button
            cautionText = Text(Point(50,4), "You didn't click any button. Please try again.")  
            cautionText.setFill("white")
            cautionText.draw(gwin)                  #a text is drawn to notify user and prompts another try
    gwin.close()

    return playAgain

def playGame(gwin):
    ''' After user clicks the play button, they are led to an interface with pre-setup cards,
        hit,stand,quit, restart buttons, card value count box of both dealer and player.
        The game starts after user clicks either hit/stand button'''
    
    rect = Rectangle(Point(0,0), Point(100,100))    #set up background using Rectangle object
    rect.setFill(color_rgb(255,153,153))
    rect.setOutline(color_rgb(255,153,153))
    rect.draw(gwin)
    image2 = Image(Point(50,85), "dealer.gif")      #dealer drawn using Image object  
    image2.draw(gwin)
    blackjackGame = BlackJack()                     #create a Blackjack object and assign to a variable
    facedown_dCardVal = blackjackGame.initDeal(gwin,20,40,65,65,20,40,45,45) #one of dealer's 2 cards is dealt face-down
    hitButton = Button(gwin, "Hit", Point(40,15), 5, 10)                     #buttons created using Button class
    standButton = Button(gwin, "Stand", Point(60,15), 5, 10)
    exitButton = Button(gwin, "Exit", Point(95,2.5), 5, 10)
    restartButton = Button(gwin, "Restart", Point(5,2.5), 5, 10)
    restartButton.deactivate()                      #Restart button is deactivated until user finishes playing 1st round
    xP = 60                                         #hard code intitial position of dealer and player cards 
    xD = 60
    yP = 45
    yD = 65

    pTot = blackjackGame.evaluateHand(blackjackGame.pHand) #card value of player evaluated and assigned to a variable
    dTot = blackjackGame.evaluateHand(blackjackGame.dHand) #card value of player evaluated and assigned to a variable
    pscoreBox = Rectangle(Point(90,10), Point(100,20))     
    pscoreBox.setOutline("red")
    pscoreBox.draw(gwin)
    pscoreNum = Text(Point(95,15), pTot)            #player card value number created using Text object
    pscoreNum.setSize(26)
    pscoreNum.setFill("black")
    pscoreNum.setFace("times roman")
    pscoreNum.draw(gwin)
    dScoreBox = Rectangle(Point(0,90), Point(10,100))#dealer card value count box created using Rectangle object     
    dScoreBox.setOutline("red")
    dScoreBox.draw(gwin)
    dscoreNum = Text(Point(5,95), "")               #dealer card value number created using Text object
    dscoreNum.setFace("times roman")
    dscoreNum.setSize(26)
    dscoreNum.setFill("black")
    dscoreNum.draw(gwin)
    pt = gwin.getMouse()
    playAgain = False                               #Boolean condition to play again set before while loop
    while not exitButton.isClicked(pt):             #as long as exit button is not clicked, user can play one full round
        gameConditions(gwin, pt, standButton, hitButton, restartButton, blackjackGame, facedown_dCardVal, xP, xD, yP, yD, pscoreNum, dscoreNum, pTot)
        pt = gwin.getMouse()                            
        if restartButton.isClicked(pt):             #user clicks restart button -> return to home screen
            cover = Rectangle(Point(0,0), Point(100,100))#a Rectangle object is drawn to cover the cards,image and buttons from previous round
            cover.setFill(color_rgb(255,153,153))
            cover.setOutline(color_rgb(255,153,153))
            cover.draw(gwin)
            blackjackGame.pHand.clear()             #every dealer card from previous round is deleted from list
            blackjackGame.dHand.clear()             #every dealer card from previous round is deleted from list
                                                    #so that in the next round, the count boxes are updated with new card values
            gameSetup(gwin)                         #the same game setup appears again
            playAgain = True                        #and user can play just like the previous round
            break
    return playAgain

def gameConditions(gwin, pt, standButton, hitButton, restartButton, blackjackGame, facedown_dCardVal, xP, xD, yP, yD, pscoreNum, dscoreNum, pTot):
    ''' The win/lose/tie conditions of Blackjack are set up'''
    
    while not standButton.isClicked(pt):            #as long as the stand button is not clicked
        if hitButton.isClicked(pt) and blackjackGame.evaluateHand(blackjackGame.pHand) <= 21: #if user clicks hit and the value of 2 auto-generated player cards does not exceed 21
            blackjackGame.hit(gwin,xP,yP)           #a new plater card drawn using hit function
            pTot = blackjackGame.evaluateHand(blackjackGame.pHand)  #player card value is updated with the new player card
            pscoreNum.setText(pTot)                 #player card value count is set to the variable pTot assigned above
            xP = xP + 20                            #for every new player card drawn, its position value is shifted to the right by 20
        pt = gwin.getMouse()
    hitButton.deactivate()                          #as soon as user clicks stand button, hit button becomes deactivated
             
    if pTot > 21:                                   #after stand button is clicked, if player card value exceeds 21 -> player busts
        loserP = (Text(Point(50,27), "PLAYER BUSTED, DEALER WINS"))
        loserP.setFill("white")
        loserP.setSize(16)
        loserP.setFace("times roman")
        loserP.draw(gwin)
                                                    #a dealer card is dealt and drawn face-down
        facedown_dCardValImage = Image(Point(20,65), "playingcards/" +  str(facedown_dCardVal.getSuit()) + str(facedown_dCardVal.getRank()) + ".gif")
        facedown_dCardValImage.draw(gwin)   
        
    else:                                           #after stand button is clicked, if player card value does not exceed 21
        dTot = blackjackGame.dealerPlays(gwin,xD,yD)#dealer deals card to himself
        dscoreNum.setText(dTot)                     #dealer card value is set to the variable dTot assigned in dealerPlays function
        xD = xD + 20                                #for every new dealer card drawn, its position value is shifted to the right by 20
        facedown_dCardValImage = Image(Point(20,65), "playingcards/" +  str(facedown_dCardVal.getSuit()) + str(facedown_dCardVal.getRank()) + ".gif")
        facedown_dCardValImage.draw(gwin)           #dealer card dealt face-down       
                
        if pTot > 21:                               #if player card value exceeds 21 -> player busts
            loserP = (Text(Point(50,27), "PLAYER BUSTED, DEALER WINS"))
            loserP.setFill("white")
            loserP.setSize(16)
            loserP.setFace("times roman")
            loserP.draw(gwin)
             
        if dTot > 21:                               #if dealer card value exceeds 21 -> dealer busts
            loserD = (Text(Point(50,27), "DEALER BUSTED, PLAYER WINS"))
            loserD.setFill("white")
            loserD.setSize(16)
            loserD.setFace("times roman")
            loserD.draw(gwin)

        if dTot > pTot and dTot <= 21:              #if dealer card value does not exceed 21 is higher than that of player -> dealer wins
            loserD = (Text(Point(50,27), "DEALER WINS!"))
            loserD.setFill("white")
            loserD.setSize(16)
            loserD.setFace("times roman")
            loserD.draw(gwin)
            
        if pTot > dTot and pTot <= 21:              #if player card value does not exceed 21 is higher than that of dealer -> player wins
            loserD = (Text(Point(50,27), "PLAYER WINS!"))
            loserD.setFill("white")
            loserD.setSize(16)
            loserD.setFace("times roman")
            loserD.draw(gwin)
            
        if pTot == dTot and pTot <= 21 and dTot <= 21: #if player and dealer's card value equal each other and do not exceed 21 -> tie
            loserD = (Text(Point(50,27), "DEALER AND PLAYER TIE!"))
            loserD.setFill("white")
            loserD.setSize(16)
            loserD.setFace("times roman")
            loserD.draw(gwin)    
    standButton.deactivate()                        #as soons as user clicks stand button and finishes playing, stand button is deactivated
    restartButton.activate()                        #after user finished playing 1 round, restart button is activated
           
def main():
    ''' Put the pieces into place, run program in 3 steps'''
    win = GraphWin("BlackJack", 600, 600)           #background setup
    win.setCoords(0, 0, 100, 100)
    win.setBackground(color_rgb(255,153,153))
    playAgain = gameSetup(win)                      #game set up allows blackjack game to run with additional functions
    if playAgain:                                   #repeat the steps executed in main function if the user plays again
        main()
    
if __name__=="__main__":
    main()    
    
