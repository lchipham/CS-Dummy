#This is an object-oriented Black Jack program with 4 additional classes:
# + buttonClass
# + PlayingCard
# + Deck
# + BlackjackClass

from graphics import*
from buttonClass import*
from PlayingCard import*
from Deck import*
from random import*
from BlackjackClass import*

def gameSetup(gwin):
    ''' GUI interface with title, one theme image and 3 buttons
        allowing users to play, view the rules and quit'''
    
    title = Text(Point(50,85), "BLACKJACK")         #title drawn using Text object
    title.setFace("times roman")
    title.setSize(40)
    title.setFill("lavender")
    title.draw(gwin)
    image1 = Image(Point(50,50), "intro.gif")       #theme image using Image object 
    image1.draw(gwin)
    playButton = Button(gwin, "Play", Point(35,10), 5, 10)      #Buttons created using Button class
    guideButton = Button(gwin, "Rules", Point(50,10), 5, 10)
    quitButton = Button(gwin, "Quit", Point(65,10), 5, 10)
    closeWin = True                                 #Boolean condition set before while loop
    while closeWin:                                 
        pt = gwin.getMouse()
        if playButton.isClicked(pt):                #user clicks play button to play for 1st and consecutive times
            playAgain = playGame(gwin)
            break                                   #while loop breaks if playButton is clicked and game is restarted
        elif quitButton.isClicked(pt):              #user clicks quit button to stop playing and quit the game       
            playAgain = False                       #both Boolean conditions are set to False and game is quit
            closeWin = False
        elif guideButton.isClicked(pt):             #user clicks guideButton to open the pop-up Rules box
            win2 = GraphWin("Rules", 500, 500)      #new window setup 
            win2.setCoords(0, 0, 100, 100)
            win2.setBackground("lavender")
            card = Image(Point(50,50), "card2.gif") #image drawn using Image object
            card.draw(win2)

            money1 = Image(Point(18,50), "money.gif")
            money1.draw(win2)

            money2 = Image(Point(83,50), "money.gif")
            money2.draw(win2)

            progress = Text(Point(50,82), "Blackjack\n Goal: Beat the dealer's hand without going over 21\n \
        Card values:\n ACE: 1 or 11 pts\n  FACE CARDS: 10 pts\n CARDS 2-10: pts equal to face value\n \
        Rules:\n At the start of the game, the player is dealt two cards.\n They can choose to hit (get another card) or stand (keep hand)")   #rules
            progress.setFace("times roman")
            progress.setSize(12)
            progress.draw(win2)                     #Instructions drawn using Text object
            
            winIf = Text(Point(50,25),"You win if:\n 1.) Your hand is higher than the dealer's hand and less than 21\n \
        2.)The dealer's total goes over 21 or (busts)")
            winIf.setFace("times roman")
            winIf.setSize(12)
            winIf.draw(win2)
        else:                                       #if user clicks outside of the 3 play, rules and quit button
            cautionText = Text(Point(50,4), "You didn't click any button. Please try again.")  
            cautionText.setFill("white")
            cautionText.draw(gwin)                  #text is drawn to notify user that they didn't click a button; prompts them for another try
    gwin.close()                                    #outside while closeWin = True now, so window is finally closed

    return playAgain                                #returns playAgain so it can be called in main to "play again"

def playGame(gwin):
    ''' After user clicks the play button, they are led to an interface with pre-setup cards,
        hit,stand,quit, restart buttons, card value count box of both dealer and player.
        The game starts after user clicks either hit/stand button'''
    
    rect = Rectangle(Point(0,0), Point(100,100))    #set up background using Rectangle object
    rect.setFill(color_rgb(255,153,153))
    rect.setOutline(color_rgb(255,153,153))
    rect.draw(gwin)
    image2 = Image(Point(50,85), "dealer.gif")      #dealer drawn using Image object  
    image2.draw(gwin)
    blackjackGame = BlackJack()                     #create a Blackjack object and assign to a variable
    facedown_dCardVal = blackjackGame.initDeal(gwin,20,40,65,65,20,40,45,45) #one of dealer's 2 cards is dealt face-down
    hitButton = Button(gwin, "Hit", Point(40,15), 5, 10)                     #buttons created using Button class
    standButton = Button(gwin, "Stand", Point(60,15), 5, 10)
    exitButton = Button(gwin, "Exit", Point(95,2.5), 5, 10)
    restartButton = Button(gwin, "Restart", Point(5,2.5), 5, 10)
    restartButton.deactivate()                      #Restart button is deactivated until user finishes playing 1st round
    xP = 60                                         #hard code intitial position of dealer and player cards 
    xD = 60
    yP = 45
    yD = 65

    pTot = blackjackGame.evaluateHand(blackjackGame.pHand) #card value of player evaluated and assigned to a variable
    dTot = blackjackGame.evaluateHand(blackjackGame.dHand) #card value of player evaluated and assigned to a variable
    pscoreBox = Rectangle(Point(90,10), Point(100,20))     
    pscoreBox.setOutline("red")
    pscoreBox.draw(gwin)
    pscoreNum = Text(Point(95,15), pTot)            #player card value number created using Text object
    pscoreNum.setSize(26)
    pscoreNum.setFill("black")
    pscoreNum.setFace("times roman")
    pscoreNum.draw(gwin)
    dScoreBox = Rectangle(Point(0,90), Point(10,100))#dealer card value count box created using Rectangle object     
    dScoreBox.setOutline("red")
    dScoreBox.draw(gwin)
    dscoreNum = Text(Point(5,95), "")               #dealer card value number created using Text object
    dscoreNum.setFace("times roman")
    dscoreNum.setSize(26)
    dscoreNum.setFill("black")
    dscoreNum.draw(gwin)
    pt = gwin.getMouse()
    playAgain = False                               #Boolean condition to play again set before while loop
    while not exitButton.isClicked(pt):             #as long as exit button is not clicked, user can play one full round
        gameConditions(gwin, pt, standButton, hitButton, restartButton, blackjackGame, facedown_dCardVal, xP, xD, yP, yD, pscoreNum, dscoreNum, pTot)
        pt = gwin.getMouse()                        #line above calls gameConditons so that game rules and outcomes can be executed/interpreted                        
        if restartButton.isClicked(pt):             #user clicks restart button -> return to home screen
            cover = Rectangle(Point(0,0), Point(100,100)) #a Rectangle object is drawn to cover the cards,image and buttons from previous round
            cover.setFill(color_rgb(255,153,153))
            cover.setOutline(color_rgb(255,153,153))
            cover.draw(gwin)
            blackjackGame.pHand.clear()             #every dealer card from previous round is deleted from list
            blackjackGame.dHand.clear()             #every dealer card from previous round is deleted from list
                                                    #so that in the next round, the count boxes are updated with new card values
            gameSetup(gwin)                         #the same game setup appears again when gameSetup() is called
            playAgain = True                        #and user can play just like the previous round when Boolean playAgain is set to True again
            break                                   #break allows us to break out of while loop go to gameSetup window to play again
    return playAgain

def gameConditions(gwin, pt, standButton, hitButton, restartButton, blackjackGame, facedown_dCardVal, xP, xD, yP, yD, pscoreNum, dscoreNum, pTot):
    ''' The win/lose/tie conditions of Blackjack are set up'''
    
    while not standButton.isClicked(pt):            #as long as the stand button is not clicked
        if hitButton.isClicked(pt) and blackjackGame.evaluateHand(blackjackGame.pHand) <= 21: #if user clicks hit and the value of 2 auto-generated player cards does not exceed 21
            blackjackGame.hit(gwin,xP,yP)           #a new player card is drawn using hit function
            pTot = blackjackGame.evaluateHand(blackjackGame.pHand)  #player card value is updated with the new player card
            pscoreNum.setText(pTot)                 #player card value count is set to the variable pTot assigned above
            xP = xP + 20                            #for every new player card drawn, its position value is incremented to the right by 20
        pt = gwin.getMouse()
    hitButton.deactivate()                          #as soon as user clicks stand button, hit button becomes deactivated
             
    if pTot > 21:                                   #after stand button is clicked, if player card value exceeds 21 -> player busts
        loserP = (Text(Point(50,27), "PLAYER BUSTED, DEALER WINS"))
        loserP.setFill("white")
        loserP.setSize(16)
        loserP.setFace("times roman")
        loserP.draw(gwin)
                                                    #a dealer card is dealt and drawn face-down
        facedown_dCardValImage = Image(Point(20,65), "playingcards/" +  str(facedown_dCardVal.getSuit()) + str(facedown_dCardVal.getRank()) + ".gif")
        facedown_dCardValImage.draw(gwin)   
        
    else:                                           #after stand button is clicked, if player card value does not exceed 21
        dTot = blackjackGame.dealerPlays(gwin,xD,yD)#dealer deals card to himself
        dscoreNum.setText(dTot)                     #dealer card value is set to the variable dTot assigned in dealerPlays function
        xD = xD + 20                                #for every new dealer card drawn, its position value is shifted to the right by 20
        facedown_dCardValImage = Image(Point(20,65), "playingcards/" +  str(facedown_dCardVal.getSuit()) + str(facedown_dCardVal.getRank()) + ".gif")
        facedown_dCardValImage.draw(gwin)           #dealer card dealt face-down       
                
        if pTot > 21:                               #if player card value exceeds 21 -> player busts
            loserP = (Text(Point(50,27), "PLAYER BUSTED, DEALER WINS"))
            loserP.setFill("white")
            loserP.setSize(16)
            loserP.setFace("times roman")
            loserP.draw(gwin)
             
        if dTot > 21:                                  #if dealer card value exceeds 21 -> dealer busts
            loserD = (Text(Point(50,27), "DEALER BUSTED, PLAYER WINS"))
            loserD.setFill("white")
            loserD.setSize(16)
            loserD.setFace("times roman")
            loserD.draw(gwin)

        if dTot > pTot and dTot <= 21:                 #if dealer card value does not exceed 21 is higher than that of player -> dealer wins
            loserD = (Text(Point(50,27), "DEALER WINS!"))
            loserD.setFill("white")
            loserD.setSize(16)
            loserD.setFace("times roman")
            loserD.draw(gwin)
            
        if pTot > dTot and pTot <= 21:                 #if player card value does not exceed 21 is higher than that of dealer -> player wins
            loserD = (Text(Point(50,27), "PLAYER WINS!"))
            loserD.setFill("white")
            loserD.setSize(16)
            loserD.setFace("times roman")
            loserD.draw(gwin)
            
        if pTot == dTot and pTot <= 21 and dTot <= 21: #if player and dealer's card value equal each other and do not exceed 21 -> tie
            loserD = (Text(Point(50,27), "DEALER AND PLAYER TIE!"))
            loserD.setFill("white")
            loserD.setSize(16)
            loserD.setFace("times roman")
            loserD.draw(gwin)    
    standButton.deactivate()                        #as soons as user clicks stand button and finishes playing, stand button is deactivated
    restartButton.activate()                        #after user finished playing a round, restart button is activated if they want to play again
           
def main():
    ''' Put the pieces into place, run program in 3 steps'''
    win = GraphWin("BlackJack", 600, 600)           #background setup
    win.setCoords(0, 0, 100, 100)
    win.setBackground(color_rgb(255,153,153))
    playAgain = gameSetup(win)                      #game set up allows blackjack game to run with additional functions
    if playAgain:                                   #repeats the steps executed in main function if the user plays again
        main()
    
if __name__=="__main__":
    main()    
    
