#This program has 2 main parts:
    #Part 1: Demo word cloud: users get to display a default wordcloud in 3 modes
    #Part 2: User's customized word cloud: input file,font,colors

from graphics import *
from random import randrange
from time import sleep

def main():
    #1. Intro to Word Cloud
    win = setupGUI1()
    #2. Output 35 words in another window (win2) according to option chosen by user
    pt = demo_WordCloud(win)
    #3. GUI setup for User's word cloud generator
    user_WordCloud(win,pt)
    
#Function to execute the whole of part 1
def demo_WordCloud(win):
    pt = win.getMouse()
    #while loop that checks if user click's in button, if not, try again
    while not (pt.getX()>=400 and pt.getX()<=600 and pt.getY()>=520 and pt.getY()<=550):
        promptText(win, 500, 580, "white", 18, "You didn't click the button. Please try again.")
        pt = win.getMouse()
    userStart1(win) #start part 1
    pt = win.getMouse()
    #while loop that checks if user's click is not in Exit button(pink button that leads to part 2)
    while not (pt.getX()>=400 and pt.getX()<=600 and pt.getY()>=710 and pt.getY()<=750): 
        if pt.getX()>=200 and pt.getX()<=350 and pt.getY()>=650 and pt.getY()<=680:
            outputWords1("Warm-toned Word Cloud", "sun.gif", "story of sun and moon.txt","red","orange","pink")
        elif pt.getX()>=425 and pt.getX()<=575 and pt.getY()>=650 and pt.getY()<=680:
            outputWords1("Neutral-toned Word Cloud", "neutral sky.gif", "story of sun and moon.txt",color_rgb(randrange(0,250),randrange(0,250),randrange(0,250)),color_rgb(randrange(0,250),randrange(0,250),randrange(0,250)),color_rgb(randrange(0,250),randrange(0,250),randrange(0,250)))
        elif pt.getX()>=650 and pt.getX()<=800 and pt.getY()>=650 and pt.getY()<=680:
            outputWords1("Cool-toned Word Cloud", "moon.gif", "story of sun and moon.txt", "blue","purple","black")
        else:
            promptText(win, 500, 770, "white", 18, "You didn't click any button. Please try again.")
        pt = win.getMouse()
    return pt

#Function to execute the whole of part 2
def user_WordCloud(win,pt):
    #if condition to check if user clicks in the right button
    if pt.getX()>=400 and pt.getX()<=600 and pt.getY()>=710 and pt.getY()<=750:
        inputboxFile, inputboxFont, inputboxBGColor, inputboxColors = setupGUI2(win)
        pt = win.getMouse()
        #while loop that checks if user click's in button, if not, try again
        while not (pt.getX()>=400 and pt.getX()<=600 and pt.getY()>=560 and pt.getY()<=590):
            promptText(win, 500, 620, "white", 18, "You didn't click the button. Please try again.")
            pt = win.getMouse()
        userStart2(win,inputboxFile,inputboxFont,inputboxBGColor, inputboxColors)
    #Output 35 most frequent words into main window (win)
    outputWords2(win, inputboxFile,inputboxFont,inputboxBGColor, inputboxColors)
    
#Function to draw button with computed midpoint
def drawButton(gwin, pt1, pt2, color, words):
    button=Rectangle(pt1, pt2)
    button.setFill(color)
    button.draw(gwin)
    #Put label on button + compute point in the middle of button
    midpt = Point((pt1.getX()+ pt2.getX())/2, (pt1.getY()+pt2.getY())/2)
    buttonLabel = Text(midpt,words)
    buttonLabel.setFace("times roman")
    buttonLabel.setSize(16)
    buttonLabel.draw(gwin)

#Function to draw Text objects
def promptText(gwin, x,y, color, size, words):
    text = Text(Point(x,y), words)
    text.setFill(color)
    text.setSize(size)
    text.setFace("times roman")
    text.draw(gwin)

#Function to draw a cover to hide the previous objects
def drawCover(gwin, pt1, pt2, color):
    cover = Rectangle(pt1, pt2)
    cover.setFill(color)
    cover.setOutline(color)
    cover.draw(gwin)

#Function to set up the texts and prompts needed for users to follow the program     
def setupGUI1():
    win = GraphWin("Word Cloud", 1000, 800)
    win.setBackground(color_rgb(255,153,153))

    #title + subtitle
    promptText(win,500,250, "lavender", 50, "WORD CLOUD")
    promptText(win,500,390, "white", 24, "A word cloud is a collection, or cluster,\n of words depicted in different sizes. \nThe bigger the word appears, the more \noften itâ€™s mentioned within a given\n text and the more important it is.")
   

    drawButton(win, Point(400,520), Point(600,550), "lavender", "Demo Version")
    return win

#Function to officially start part 1(demo) once the user clicks the right button
def userStart1(win):
    #cover
    drawCover(win, Point(0,0), Point(1000,800), "black")
    sleep(0.1)

    #title + subtitle
    promptText(win, 500,100, "white", 42, "The story of Sun and Moon")
    promptText(win, 500,140, "lavender", 20, "[3 display modes]")

    image = Image(Point(500,400),"sunandmoon.gif")
    image.draw(win)

    drawButton(win, Point(200,650), Point(350,680), "lavender", "Warm-toned")
    drawButton(win, Point(425,650), Point(575,680), "lavender", "Neutral-toned")
    drawButton(win, Point(650,650), Point(800,680), "lavender", "Cool-toned")
    drawButton(win, Point(400,710), Point(600,750), "pink", "Next: create your\n own Word Cloud")
    
#Function to execute the steps needed to output 35 words with the highest frequency
def outputWords1(winName, imageName, fileName,a,b,c):
    win2 = GraphWin(winName, 1000, 800)
    image = Image(Point(500,400),imageName)
    image.draw(win2)
    #generate sun and moon text file
    text = generateFile1(win2,"story of sun and moon.txt")
    #delete stop words
    words1 = del_stopWords(text)
    #construct a dictionary of word count
    counts = dict_Text(words1)
    #sort items by frequency
    items = sortbyFreq(counts)
    #avoid collusion of words and draw Text object onto window
    avoidCollision1(win2, items,a,b,c)
    #prompts user click then close window 2
    winClose(win2)

#Function to set up the texts and prompts needed for users to follow the program     
def setupGUI2(win):
        #cover
        drawCover(win, Point(0,0), Point(1000,800), color_rgb(255,153,153))
        sleep(0.2)

        #title + subtitle
        promptText(win, 500, 250, "lavender", 50, "WORD CLOUD")
        promptText(win, 500, 290, "lavender", 34, "generator")

        #Entry prompt
        promptText(win, 400,370, "white", 18, "Enter text file:")
        promptText(win, 400,410, "white", 18, "Enter text font:")
        promptText(win, 400,450, "white", 18, "Background color:")
        promptText(win, 400,490, "white", 18, "Word colors\n(unlimited inputs):")

        #Entry
        inputboxFile = Entry(Point(580,370), 25)
        inputboxFile.setFill("white")
        inputboxFile.setText("word cloud.txt")
        inputboxFile.draw(win)
        
        inputboxFont = Entry(Point(580,410), 25)
        inputboxFont.setFill("white")
        inputboxFont.setText("times roman")
        inputboxFont.draw(win)

        inputboxBGColor = Entry(Point(580,450), 25)
        inputboxBGColor.setFill("white")
        inputboxBGColor.setText("pink")
        inputboxBGColor.draw(win)

        inputboxColors = Entry(Point(580,490), 25)
        inputboxColors.setFill("white")
        inputboxColors.setText("black,red,brown")
        inputboxColors.draw(win)

        #start button
        drawButton(win, Point(400,560), Point(600,590), "lavender", "Click to get cloud")
        return inputboxFile, inputboxFont, inputboxBGColor, inputboxColors
    
#Function to officially start part 2(wc generator) once the user clicks the right button   
def userStart2(win,inputboxFile,inputboxFont,inputboxBGColor, inputboxColors):
    #move entry boxes away
    for i in range(80):
        inputboxFile.move(100,100)
        inputboxFont.move(100,100)
        inputboxColors.move(100,100)
        inputboxBGColor.move(100,100)
  
    drawCover(win, Point(0,0), Point(1000,800), inputboxBGColor.getText())
    sleep(0.05)

#Function to execute the steps needed to output 35 words with the highest frequency
def outputWords2(win, inputboxFile,inputboxFont,inputboxBGColor, inputboxColors):
    userStart2(win,inputboxFile,inputboxFont,inputboxBGColor, inputboxColors)

    #generate user-inputted file
    text = generateFile2(inputboxFile)

    #delete stop words
    words1 = del_stopWords(text)
    #construct a dictionary of word count
    counts = dict_Text(words1)
    #sort items by frequency
    items = sortbyFreq(counts)
    #avoid collusion of words and draw Text object onto window
    avoidCollision2(win,items,inputboxFont,inputboxColors)
    #prompts user click then close window 
    winClose(win)

#Function to read text file for part 1       
def generateFile1(gwin,fileName):
    text = open(fileName, 'r', encoding = "ISO-8859-1").read()
    text = text.lower()
    return text

#Function to read text file for part 2
def generateFile2(inputboxFile):
    fname = inputboxFile.getText()
    text = open(fname, 'r', encoding = "ISO-8859-1").read()
    text = text.lower()
    return text

#Function to delete stop words
def del_stopWords(text):
    stop_file = open("stopwords.txt", "r").read()
    stopwords = stop_file.split("\n")
    for ch in '''!()-[]{};:'"\,<>./?@#$%^&*_~''':
        text = text.replace(ch, '')
    words = text.split()
    words1 = []
    for filtered_w in words: 
        if filtered_w not in stopwords:
            words1.append(filtered_w)
    return words1

#Function to create a dictionary of word count
def dict_Text(words1):
    counts = {}
    for w in words1:
        counts[w] = counts.get(w,0) + 1
    return counts

#Function to sort items by frequency
def sortbyFreq(counts):
    #Small function to return frequency for each pair of item
    def byFreq(pair): 
        return pair[1]
    items = list(counts.items())
    items.sort()
    items.sort(key=byFreq, reverse = True)
    return items

#Function to make sure words' positions do not collide in part 1
def avoidCollision1(win2,items, a,b,c):
    color_list = [a,b,c]
    pt_list = []
    chosen_list = []
    size = 80
    #Create a grid with x,y points in set range
    for x in range(120,850,230):
        for y in range(50,760,80):
            random_pt = Point(x,y)
            pt_list.append(random_pt)
    for i in range(len(items[:35])):
        word = items[i][0]
        text_pt = pt_list[randrange(len(pt_list))]
        #Check if text-pt's in chosen_list, if it's not, then
        #it's added into chosen_list
        while (text_pt in chosen_list):
            text_pt = pt_list[randrange(len(pt_list))]
        chosen_list.append(text_pt)
        #now, chosen_list is a list of unique, uncollided points
        word_output = Text(text_pt, word)
        word_output.setFace("times roman")
        word_output.setSize(size)
        word_output.setFill(color_list[randrange(0,len(color_list))])
        word_output.draw(win2)
        size -= 2

#Function to make sure words' positions do not collide in part 2
def avoidCollision2(win,items,inputboxFont,inputboxColors):
    pt_list = []
    chosen_list = []
    color_list = inputboxColors.getText().split(",")
    size = 80
    for x in range(120,850,230):
        for y in range(50,760,80):
            random_pt = Point(x,y)
            pt_list.append(random_pt)
    for i in range(len(items[:35])):
        word = items[i][0]
        text_pt = pt_list[randrange(len(pt_list))]
        while (text_pt in chosen_list):
            text_pt = pt_list[randrange(len(pt_list))]
        chosen_list.append(text_pt)
        word_output = Text(text_pt, word)
        word_output.setFace(inputboxFont.getText())
        word_output.setSize(size)
        word_output.setFill(color_list[randrange(0,len(color_list))])
        word_output.draw(win)
        size -= 2
        
#Function to close window
def winClose(gwin):
    gwin.getMouse()
    gwin.close()
    
main()    
